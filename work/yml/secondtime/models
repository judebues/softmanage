# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Civilstructure(models.Model):
    id = models.CharField(db_column='ID', primary_key=True, max_length=19)  # Field name made lowercase.
    date = models.DateTimeField()
    location = models.CharField(max_length=100)
    basicallyintactsquare = models.CharField(db_column='basicallyIntactSquare', max_length=6)  # Field name made lowercase.
    damagedsquare = models.CharField(db_column='damagedSquare', max_length=6)  # Field name made lowercase.
    distoryedsquare = models.CharField(db_column='distoryedSquare', max_length=6)  # Field name made lowercase.
    note = models.CharField(max_length=200, blank=True, null=True)
    reportingunit = models.CharField(db_column='reportingUnit', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'CivilStructure'
        unique_together = (('id', 'date'),)


class Collapserecord(models.Model):
    id = models.CharField(db_column='ID', primary_key=True, max_length=19)  # Field name made lowercase.
    date = models.DateTimeField()
    location = models.CharField(max_length=100)
    type = models.CharField(max_length=3)
    status = models.CharField(max_length=3)
    note = models.CharField(max_length=200, blank=True, null=True)
    reportingunit = models.CharField(db_column='reportingUnit', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'CollapseRecord'
        unique_together = (('id', 'date'),)


class Commdisaster(models.Model):
    id = models.CharField(db_column='ID', primary_key=True, max_length=19)  # Field name made lowercase.
    date = models.DateTimeField()
    location = models.CharField(max_length=100)
    type = models.CharField(max_length=2)
    grade = models.CharField(max_length=3)
    note = models.CharField(max_length=200, blank=True, null=True)
    reportingunit = models.CharField(db_column='reportingUnit', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'CommDisaster'
        unique_together = (('id', 'date'),)


class Deathstatistics(models.Model):
    id = models.CharField(db_column='ID', primary_key=True, max_length=19)  # Field name made lowercase.
    date = models.DateTimeField()
    location = models.CharField(max_length=100)
    number = models.CharField(max_length=5)
    reportingunit = models.CharField(db_column='reportingUnit', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'DeathStatistics'
        unique_together = (('id', 'date'),)


class Disasterprediction(models.Model):
    id = models.CharField(db_column='ID', primary_key=True, max_length=19)  # Field name made lowercase.
    date = models.DateTimeField()
    location = models.CharField(max_length=100)
    longitude = models.FloatField()
    latitude = models.FloatField()
    depth = models.FloatField()
    magnitude = models.FloatField()
    intensity = models.CharField(max_length=6)
    type = models.CharField(max_length=3)
    status = models.CharField(max_length=3)
    note = models.CharField(max_length=200, blank=True, null=True)
    reportingunit = models.CharField(db_column='reportingUnit', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'DisasterPrediction'
        unique_together = (('id', 'date'),)


class Disasterrequest(models.Model):
    id = models.CharField(db_column='ID', primary_key=True, max_length=19)  # Field name made lowercase.
    date = models.DateTimeField()
    disastertype = models.CharField(max_length=3)
    status = models.CharField(max_length=1)
    o_url = models.CharField(db_column='o_URL', max_length=200, blank=True, null=True)  # Field name made lowercase.
    reportingunit = models.CharField(db_column='reportingUnit', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'DisasterRequest'
        unique_together = (('id', 'date'),)


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class City(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=2)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'city'


class Commdisaster(models.Model):
    id = models.CharField(db_column='ID', primary_key=True, max_length=19)  # Field name made lowercase.
    date = models.DateTimeField()
    location = models.CharField(max_length=100)
    type = models.CharField(max_length=2)
    grade = models.CharField(max_length=3)
    note = models.CharField(max_length=200, blank=True, null=True)
    reportingunit = models.CharField(db_column='reportingUnit', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'commdisaster'
        unique_together = (('id', 'date'),)


class Community(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=3)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'community'


class County(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=2)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'county'


class Datasourcemaincode(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=1)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'dataSourceMainCode'


class Datasourcesubcode(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=3)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'dataSourceSubCode'


class DisinfoMainclass(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=1)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'disInfo_mainClass'


class DisinfoSubclass(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=2)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'disInfo_subClass'


class DisinfoTablename(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=3)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'disInfo_tableName'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Province(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=2)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'province'


class Street(models.Model):
    code = models.CharField(db_column='Code', primary_key=True, max_length=3)  # Field name made lowercase.
    info = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'street'
